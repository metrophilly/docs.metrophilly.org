name: Create Sermon Audio Process Issue

on:
  schedule:
    - cron: "0 16 * * 5" # Every Friday at noon
  workflow_dispatch:

jobs:
  create_issues:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: main
    steps:
      - name: Create Issue and Add to Project
        uses: actions/github-script@v7
        env:
          PROJECT_ID: ${{ secrets.SUPPORT_ROTATION_PROJECT_ID }}

        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const labels = ['support-rotation'];

            // dynamic title Logic
            const today = new Date();
            const sunday = new Date(today);
            sunday.setDate(today.getDate() + 2);
            const formattedDate = `${sunday.getMonth() + 1}/${sunday.getDate()}`;

            const issueTitle = `Support: ðŸŽ™ Sermon Audio Process & Upload for ${formattedDate}`;

            const issueBody = `
            **This is to ensure the sermon audio is processed, scrubbed, and deployed to all podcast platforms and the website.**

            **Due: Scheduled to post by Tuesday 4 PM!**

            ---

            ### Guide for working on this task:

            - Clone and run the script at [https://github.com/metrophilly/sermon-processor](https://github.com/metrophilly/sermon-processor)

            - [Walkthrough for Documentation](https://docs.google.com/document/d/1a4TKKc_wzeZQpRmYtNluZuHA99PP38EJtcRtW_ildsg/edit?tab=t.xzdkojyiaqio)

            ### Checklist

            - [ ] Process and scrub the sermon audio
              - [ ] Ensure that the file includes the closing prayer
            - [ ] Upload processed audiofile to S3 bucket
            - [ ] Update the "Sermon" document in Sanity to include the correct S3 path and deploy
            - [ ] When complete, shift card to "Ready to Review" and tag this week's reviewer

            cc: @paulhchoi
            `;

            // Create the issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: labels
            });

            // Add the issue to the project
            const projectId = process.env.PROJECT_ID;
            const contentId = issue.data.node_id;

            const query = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item {
                    id
                  }
                }
              }
            `;

            await github.graphql(query, {
              projectId: projectId,
              contentId: contentId
            });

            console.log(`Created and added issue to project: ${issue.data.html_url}`);
