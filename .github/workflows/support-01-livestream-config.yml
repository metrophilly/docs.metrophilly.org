name: Create Livestream Configuration Issue

on:
  schedule:
    - cron: "0 16 * * 5" # Every Friday at noon
  workflow_dispatch:
permissions:
  contents: read
  issues: write
jobs:
  create_issues:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: main
    steps:
      - name: Create Issue and Add to Project
        uses: actions/github-script@v7
        env:
          PROJECT_ID: ${{ secrets.SUPPORT_ROTATION_PROJECT_ID }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const labels = ['support-rotation'];

            // dynamic title Logic
            const today = new Date();
            const sunday = new Date(today);
            sunday.setDate(today.getDate() + 2);
            const formattedDate = `${sunday.getMonth() + 1}/${sunday.getDate()}`;

            const issueTitle = `Support: ðŸŽ¬ Livestream Setup for ${formattedDate}`;

            const issueBody = `
            **This is to ensure all livestream configurations are ready before Sunday Worship.**

            **Due: By Saturday 6 PM**

            ---

            ### Guide for working on this task:

            - [Livestream Configuration Walkthrough](https://docs.google.com/document/d/1a4TKKc_wzeZQpRmYtNluZuHA99PP38EJtcRtW_ildsg/edit?tab=t.0)

            ### Needed Links (open 'em all!):

            - [Restream.io dashboard](https://app.restream.io/channel)
            - [Sanity.io Studio dashboard](https://metrochurch.sanity.studio/desk/)

            ### Checklist

            - [ ] Update and confirm "Livestream Event" data in Sanity Studio is correct
            - [ ] Update Restream's "Social Alerts" content
            - [ ] When complete, shift card to "Ready to Review" and tag this week's reviewer

            cc: @paulhchoi
            `;

            // Create the issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: labels
            });

            // Add the issue to the project
            const projectId = process.env.PROJECT_ID;
            const contentId = issue.data.node_id;

            const query = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                  item {
                    id
                  }
                }
              }
            `;

            await github.graphql(query, {
              projectId: projectId,
              contentId: contentId
            });

            console.log(`Created and added issue to project: ${issue.data.html_url}`);
